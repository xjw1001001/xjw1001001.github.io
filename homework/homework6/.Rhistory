library(tidyverse)
starRail_pull = function(n_pulls = 1000){
# Gacha parameters
five_star_rate <- 0.006
four_star_rate <- 0.051
rate_up_five_star <- 0.5
rate_up_four_star <- 0.5
# Define characters
four_star_characters <- c("Arlan", "Asta", "Dan Heng", "Herta", "Hook",
"March 7th", "Natasha", "Pela", "Qingque", "Sampo",
"Serval", "Sushang", "Tingyun")
five_star_characters <- c("Bailu", "Bronya", "Clara", "Gepard", "Himeko", "Seele", "Welt", "Yanqing")
rate_up_five_star_char <- "Seele"
rate_up_four_star_chars <- c("Natasha", "Hook", "Pela")
# Initialize counters
pity_counter_five_star <- 0 # counts how many pulls no 5 star characters
pity_counter_four_star_plus <- 0 # counts how many pulls no 4+ star characters
last_five_star_not_up <- FALSE # counts whether the last 5 star character is not the up character
pull_results <- vector(length = n_pulls)
star_results <- vector(length = n_pulls)
for(pull in 1:n_pulls) {
# generate a random number to determine the pull result
rand <- runif(1)
pity_counter_four_star_plus <- 1 + pity_counter_four_star_plus
pity_counter_five_star <- 1 + pity_counter_five_star
# condition for a 5 star character
# either this pull achieves 5 star rate or you haven't got 5 star in last 89 pulls
if (rand <= five_star_rate || pity_counter_five_star >= 90) {
# Lucky, got 5 star, so reset the counter.
pity_counter_five_star <- 0
pity_counter_four_star_plus <- 0
# condition for a 5 star up character
# either this pull achieves 5 star up rate or you the last 5 star is not the up character
if (rand <= five_star_rate * rate_up_five_star || last_five_star_not_up == TRUE) {
char <- rate_up_five_star_char
star <- 5
} else {
# randomly choose 1 non-up 5 star character
char <- sample(five_star_characters[five_star_characters != rate_up_five_star_char], 1)
star <- 5
# This 5 star is not up character
last_five_star_not_up <- TRUE
}
}
# When it's not 5 star character, but it's 4 star character
# (five_star_rate < rand <= (five_star_rate + four_star_rate))
else if (rand <= (five_star_rate + four_star_rate) || pity_counter_four_star_plus >= 10) {
pity_counter_four_star_plus <- 0
# condition for a 4 star up character
if (rand <= (five_star_rate + four_star_rate * rate_up_four_star)) {
char <- sample(rate_up_four_star_chars, 1)
star <- 4
} else {
char <- sample(four_star_characters[!four_star_characters %in% rate_up_four_star_chars], 1)
star <- 4
}
} else {
char <- "3★ light cone"
star <- 3
}
pull_results[pull] <- char
star_results[pull] <- star
}
print(table(pull_results))
return(data.frame(result = pull_results, star = star_results, index = 1:n_pulls))
}
# Save pull results to a CSV file
#write.csv(starRail_pull(80), "gacha_pull_results.csv", row.names = FALSE)
df = starRail_pull(80)
head(df)
print(table(df$star))
df = starRail_pull(80)
df = starRail_pull(80)
df = starRail_pull(80)
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(80)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
# Don't change anything here
knitr::opts_chunk$set(
comment = "", prompt = F, message=F, warning = F
)
# Load necessary libraries
library(tidyverse)
starRail_pull = function(n_pulls = 1000, print = FALSE){
# Gacha parameters
five_star_rate <- 0.006
four_star_rate <- 0.051
rate_up_five_star <- 0.5
rate_up_four_star <- 0.5
# Define characters
four_star_characters <- c("Arlan", "Asta", "Dan Heng", "Herta", "Hook",
"March 7th", "Natasha", "Pela", "Qingque", "Sampo",
"Serval", "Sushang", "Tingyun")
five_star_characters <- c("Bailu", "Bronya", "Clara", "Gepard", "Himeko", "Seele", "Welt", "Yanqing")
rate_up_five_star_char <- "Seele"
rate_up_four_star_chars <- c("Natasha", "Hook", "Pela")
# Initialize counters
pity_counter_five_star <- 0 # counts how many pulls no 5 star characters
pity_counter_four_star_plus <- 0 # counts how many pulls no 4+ star characters
last_five_star_not_up <- FALSE # counts whether the last 5 star character is not the up character
pull_results <- vector(length = n_pulls)
star_results <- vector(length = n_pulls)
for(pull in 1:n_pulls) {
# generate a random number to determine the pull result
rand <- runif(1)
pity_counter_four_star_plus <- 1 + pity_counter_four_star_plus
pity_counter_five_star <- 1 + pity_counter_five_star
# condition for a 5 star character
# either this pull achieves 5 star rate or you haven't got 5 star in last 89 pulls
if (rand <= five_star_rate || pity_counter_five_star >= 90) {
# Lucky, got 5 star, so reset the counter.
pity_counter_five_star <- 0
pity_counter_four_star_plus <- 0
# condition for a 5 star up character
# either this pull achieves 5 star up rate or you the last 5 star is not the up character
if (rand <= five_star_rate * rate_up_five_star || last_five_star_not_up == TRUE) {
char <- rate_up_five_star_char
star <- 5
} else {
# randomly choose 1 non-up 5 star character
char <- sample(five_star_characters[five_star_characters != rate_up_five_star_char], 1)
star <- 5
# This 5 star is not up character
last_five_star_not_up <- TRUE
}
}
# When it's not 5 star character, but it's 4 star character
# (five_star_rate < rand <= (five_star_rate + four_star_rate))
else if (rand <= (five_star_rate + four_star_rate) || pity_counter_four_star_plus >= 10) {
pity_counter_four_star_plus <- 0
# condition for a 4 star up character
if (rand <= (five_star_rate + four_star_rate * rate_up_four_star)) {
char <- sample(rate_up_four_star_chars, 1)
star <- 4
} else {
char <- sample(four_star_characters[!four_star_characters %in% rate_up_four_star_chars], 1)
star <- 4
}
} else {
char <- "3★ light cone"
star <- 3
}
pull_results[pull] <- char
star_results[pull] <- star
}
if(print == TRUE){
print(table(pull_results))
}
return(data.frame(result = pull_results, star = star_results, index = 1:n_pulls))
}
# Save pull results to a CSV file
#write.csv(starRail_pull(80), "gacha_pull_results.csv", row.names = FALSE)
df = starRail_pull(80)
head(df)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
df = starRail_pull(300)
print(table(df$star))
colnames(starRail_pull)
colnames(df)
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |> filter(result == "Seele")
df = starRail_pull(180)
df |>
filter(result == "Seele") |>
pull(index) |>
min()
df = starRail_pull(180)
df |>
filter(result == "Seele") |>
pull(index) |>
min()
sim_first_Seele_draws = function(){
df = starRail_pull(180)
df |>
filter(result == "Seele") |>
pull(index) |>
min() |>
return()
}
sim_first_Seele_draws = function(){
df = starRail_pull(180)
result = df |>
filter(result == "Seele") |>
pull(index) |>
min()
return(result)
}
sim_first_Seele_draws = function(){
df = starRail_pull(180)
result = df |>
filter(result == "Seele") |>
pull(index) |>
min()
return(result)
}
n = 50
sapply(1:n, sim_first_Seele_draws())
sim_first_Seele_draws = function(){
df = starRail_pull(180)
result = df |>
filter(result == "Seele") |>
pull(index) |>
min()
return(result)
}
sim_first_Seele_draws()
n = 50
sapply(1:n, sim_first_Seele_draws
n = 50
sapply(1:n, sim_first_Seele_draws)
n = 50
sapply(1:n, sim_first_Seele_draws)
?sapply
n = 50
replicate(sim_first_Seele_draws, n)
?replicate
?replicate
n = 50
replicate(n, sim_first_Seele_draws)
n = 50
replicate(n, sim_first_Seele_draws())
n = 50
replicate(n, sim_first_Seele_draws())
n = 50
P13_50 = replicate(n, sim_first_Seele_draws())
n = 500
P13_500 = replicate(n, sim_first_Seele_draws())
n = 5000
P13_5000 = replicate(n, sim_first_Seele_draws())
hist(P13_5000)
hist(P13_5000)
hist(P13_5000)
hist(P13_5000)
hist(P13_5000)
one_sample_mean_CI = function(my_sample, alpha = 0.05){
sample_mean = mean(my_sample)
sample_n = length(my_sample)
sample_sd = sd(my_sample)
sample_se = sample_sd/sqrt(sample_n)
z.score = qnorm(p=alpha/2, lower.tail=F)
margin_error = z.score * sample_se
return(c(sample_mean - margin_error, sample_mean + margin_error))
}
one_sample_mean_CI = function(my_sample, alpha = 0.05){
sample_mean = mean(my_sample)
sample_n = length(my_sample)
sample_sd = sd(my_sample)
sample_se = sample_sd/sqrt(sample_n)
z.score = qnorm(p=alpha/2, lower.tail=F)
margin_error = z.score * sample_se
return(c(sample_mean - margin_error, sample_mean + margin_error))
}
one_sample_mean_CI(P13_50)
n = 50
P13_50 = replicate(n, sim_first_Seele_draws())
n = 500
P13_500 = replicate(n, sim_first_Seele_draws())
n = 2000
P13_2000 = replicate(n, sim_first_Seele_draws())
one_sample_mean_CI = function(my_sample, alpha = 0.05){
sample_mean = mean(my_sample)
sample_n = length(my_sample)
sample_sd = sd(my_sample)
sample_se = sample_sd/sqrt(sample_n)
z.score = qnorm(p=alpha/2, lower.tail=F)
margin_error = z.score * sample_se
return(c(sample_mean - margin_error, sample_mean + margin_error))
}
one_sample_mean_CI(P13_50)
one_sample_mean_CI(P13_500)
one_sample_mean_CI(P13_2000)
P13_2000
hist(P13_2000)
set.seed(123)
n = 50
P13_50 = replicate(n, sim_first_Seele_draws())
n = 500
P13_500 = replicate(n, sim_first_Seele_draws())
n = 2000
P13_2000 = replicate(n, sim_first_Seele_draws())
hist(P13_5000)
one_sample_mean_CI = function(my_sample, alpha = 0.05){
sample_mean = mean(my_sample)
sample_n = length(my_sample)
sample_sd = sd(my_sample)
sample_se = sample_sd/sqrt(sample_n)
z.score = qnorm(p=alpha/2, lower.tail=F)
margin_error = z.score * sample_se
return(c(sample_mean - margin_error, sample_mean + margin_error))
}
one_sample_mean_CI(P13_50)
one_sample_mean_CI(P13_500)
one_sample_mean_CI(P13_2000)
sim_first_Seele_draws()
P13_2000 == 180
sample1 = P13_2000==180
pHat <- mean(sample1)
var <- pHat*(1 - pHat)/length(sample1)
halfWidth <- qnorm(.975)*sqrt(var)
(lower <- pHat - halfWidth)
(upper <- pHat + halfWidth)
df = starRail_pull(180*7)
result = df |>
filter(result == "Seele") |>
pull(index)
result
df |>
filter(result == "Seele") |>
pull(index) |>
slice(7)
sim_7_Seele_draws = function(){
df = starRail_pull(180*7)
result = df |>
filter(result == "Seele") |>
pull(index)
return(result[7])
}
set.seed(123)
n = 300
P3 = replicate(n, sim_first_Seele_draws())
one_sample_mean_CI(P3)
sim_7_Seele_draws = function(){
df = starRail_pull(180*7)
result = df |>
filter(result == "Seele") |>
pull(index)
return(result[7])
}
set.seed(123)
n = 300
P3 = replicate(n, sim_7_Seele_draws())
one_sample_mean_CI(P3)
sim_7_Seele_draws = function(){
df = starRail_pull(180*7)
result = df |>
filter(result == "Seele") |>
pull(index)
return(result[7])
}
set.seed(123)
n = 300
P3 = replicate(n, sim_7_Seele_draws())
one_sample_mean_CI(P3)
sim_7_Seele_draws = function(){
df = starRail_pull(180*7)
result = df |>
filter(result == "Seele") |>
pull(index)
return(result[7])
}
set.seed(123)
n = 500
P3 = replicate(n, sim_7_Seele_draws())
one_sample_mean_CI(P3)
one_sample_mean_CI(P3)/60 * 100
15+24
knitr::include_graphics("P1.1.png")
knitr::include_graphics("P1.3.png")
knitr::include_graphics("P1.4.png")
