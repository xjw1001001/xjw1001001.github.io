geom_function(fun =
function(x) dgamma(x, shape = 2, rate = 2))
#histogram for population
population |>
ggplot(aes(x = diameter)) +
# We need to add aes(y = ..density..) to make sure the histogram and
# probability density function are in the same scale
geom_histogram(aes(y = ..density..),bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter),
color = "mean"), size=2) +
scale_color_manual(name = "statistics", values = c(mean = "blue")) +
# Now we add the density curve
geom_function(fun =
function(x) dgamma(x, shape = 2, rate = 2), size = 2, col = "red")
base = ggplot() + xlim(0, 5)
base + stat_function(fun =
function(x) dgamma(x, shape = 2, rate = 2),
geom = "area", fill = "blue", alpha = 0.5) +
ylab("density") + xlab("seed diameter (mm)")
?sample_n
population
set.seed(2023)
sample = population |>
#calculate the weight and add a new column to the population
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
sample
set.seed(2023)
weighted_sample = population |>
#calculate the weight and add a new column to the population
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
#sample 250 with replacement by the weight column
sample_n(size = 250, replace = TRUE, weight = weight)
set.seed(2023)
weighted_sample = population |>
#calculate the weight and add a new column to the population
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
#sample 250 with replacement by the weight column
sample_n(size = 250, replace = TRUE, weight = weight)
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
weighted_sample = population |>
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
result_mean[i] = mean(sample$diameter)
result_sd[i] = sd(sample$diameter)
}
result = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
result
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
weighted_sample = population |>
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
result_mean[i] = mean(weighted_sample$diameter)
result_sd[i] = sd(weighted_sample$diameter)
}
result = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, scale = 1/2),
seed = 1:5000
)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
set.seed(2023)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
library(tidyverse)
set.seed(2023)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
population |>
summarise(mean = mean(diameter), sd = sd(diameter)) |>
knitr::kable(digit = 4, caption = "summary statistics of population")
library(ggplot2)
population |>
ggplot(aes(x = diameter)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter),
color = "mean"), size=2) +
scale_color_manual(name = "statistics", values = c(mean = "blue"))
set.seed(2023)
sample = population |> sample_n(size = 250, replace = FALSE)
df = bind_rows(lst(population, sample), .id = 'Group')
# bind_rows: lst(dataset1, dataset2), .id = "name for new column"
# After the first step, the Sample column 1
head(df, 3)
df |> group_by(Group) |>
summarise(mean = mean(diameter), sd = sd(diameter)) |>
knitr::kable(digit = 4, caption = "summary statistics")
library(ggridges)
df |> ggplot(aes(x = diameter,y = Group, fill = Group)) +
geom_density_ridges(scale = 1.2) +
theme_ridges() +
theme(legend.position = "none")
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
sample = population |> sample_n(size = 250, replace = FALSE)
result_mean[i] = mean(sample$diameter)
result_sd[i] = sd(sample$diameter)
}
# construct the result dataframe
result = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
# To plot functions without data, specify range of x-axis
base = ggplot() + xlim(0, 5)
base + geom_function(fun =
function(x) 1/(1 + exp(-2*(x-2) )) ) +
ylab("weight") + xlab("seed diameter (mm)")
# To plot functions without data, specify range of x-axis
base = ggplot() + xlim(0, 5)
base + stat_function(fun =
function(x) 1/(1 + exp(-2*(x-2) )) ,
geom = "area", fill = "blue", alpha = 0.5) +
ylab("weight") + xlab("seed diameter (mm)")
base = ggplot() + xlim(0, 5)
base + stat_function(fun =
function(x) dgamma(x, shape = 2, rate = 2),
geom = "area", fill = "blue", alpha = 0.5) +
ylab("density") + xlab("seed diameter (mm)")
#histogram for population
population |>
ggplot(aes(x = diameter)) +
# We need to add aes(y = ..density..) to make sure the histogram
# and probability density function are in the same scale
geom_histogram(aes(y = ..density..),bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter),
color = "mean"), size=2) +
scale_color_manual(name = "statistics", values = c(mean = "blue")) +
# Now we add the density curve
geom_function(fun =
function(x) dgamma(x, shape = 2, rate = 2),
size = 2, col = "red")
set.seed(2023)
weighted_sample = population |>
#calculate the weight and add a new column to the population
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
#sample 250 with replacement by the weight column
sample_n(size = 250, replace = TRUE, weight = weight)
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
weighted_sample = population |>
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
result_mean[i] = mean(weighted_sample$diameter)
result_sd[i] = sd(weighted_sample$diameter)
}
result_2 = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result_2 |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
p3 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p4 = result_2  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2, p3, p4,
labels = c("Mean unbiased", "SD unbiased",
"Mean weighted", "SD weighted"),
ncol = 2, nrow = 2)
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, scale = 1/2),
seed = 1:5000
)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
set.seed(2023)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
head(population,3)
library(tidyverse)
set.seed(2023)
population = data.frame(
diameter = rgamma(n = 5000, shape = 2, rate = 2),
seed = 1:5000
)
population |>
summarise(mean = mean(diameter), sd = sd(diameter)) |>
knitr::kable(digit = 4, caption = "summary statistics of population")
library(ggplot2)
population |>
ggplot(aes(x = diameter)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter),
color = "mean"), size=2) +
scale_color_manual(name = "statistics", values = c(mean = "blue"))
set.seed(2023)
sample = population |> sample_n(size = 250, replace = FALSE)
df = bind_rows(lst(population, sample), .id = 'Group')
# bind_rows: lst(dataset1, dataset2), .id = "name for new column"
# After the first step, the Sample column 1
head(df, 3)
df |> group_by(Group) |>
summarise(mean = mean(diameter), sd = sd(diameter)) |>
knitr::kable(digit = 4, caption = "summary statistics")
library(ggridges)
df |> ggplot(aes(x = diameter,y = Group, fill = Group)) +
geom_density_ridges(scale = 1.2) +
theme_ridges() +
theme(legend.position = "none")
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
sample = population |> sample_n(size = 250, replace = FALSE)
result_mean[i] = mean(sample$diameter)
result_sd[i] = sd(sample$diameter)
}
# construct the result dataframe
result = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
# To plot functions without data, specify range of x-axis
base = ggplot() + xlim(0, 5)
base + geom_function(fun =
function(x) 1/(1 + exp(-2*(x-2) )) ) +
ylab("weight") + xlab("seed diameter (mm)")
# To plot functions without data, specify range of x-axis
base = ggplot() + xlim(0, 5)
base + stat_function(fun =
function(x) 1/(1 + exp(-2*(x-2) )) ,
geom = "area", fill = "blue", alpha = 0.5) +
ylab("weight") + xlab("seed diameter (mm)")
base = ggplot() + xlim(0, 5)
base + stat_function(fun =
function(x) dgamma(x, shape = 2, rate = 2),
geom = "area", fill = "blue", alpha = 0.5) +
ylab("density") + xlab("seed diameter (mm)")
#histogram for population
population |>
ggplot(aes(x = diameter)) +
# We need to add aes(y = ..density..) to make sure the histogram
# and probability density function are in the same scale
geom_histogram(aes(y = ..density..),bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter),
color = "mean"), size=2) +
scale_color_manual(name = "statistics", values = c(mean = "blue")) +
# Now we add the density curve
geom_function(fun =
function(x) dgamma(x, shape = 2, rate = 2),
size = 2, col = "red")
set.seed(2023)
weighted_sample = population |>
#calculate the weight and add a new column to the population
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
#sample 250 with replacement by the weight column
sample_n(size = 250, replace = TRUE, weight = weight)
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
weighted_sample = population |>
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
result_mean[i] = mean(weighted_sample$diameter)
result_sd[i] = sd(weighted_sample$diameter)
}
result_2 = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result_2 |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
result
result_2
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
p3 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p4 = result_2  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2, p3, p4,
labels = c("Mean unbiased", "SD unbiased",
"Mean weighted", "SD weighted"),
ncol = 2, nrow = 2)
result
result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
sample = population |> sample_n(size = 250, replace = FALSE)
result_mean[i] = mean(sample$diameter)
result_sd[i] = sd(sample$diameter)
}
# construct the result dataframe
result = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
n = 1000
#creating storing vectors for mean and sd
result_mean = rep(0,n)
result_sd = rep(0,n)
set.seed(2023) # set random seed
for(i in 1:n){ # for loop for sampling and calculation
weighted_sample = population |>
mutate(weight = 1/(1 + exp(-2*(diameter-2))) ) |>
sample_n(size = 250, replace = TRUE, weight = weight)
result_mean[i] = mean(weighted_sample$diameter)
result_sd[i] = sd(weighted_sample$diameter)
}
result_2 = data.frame(mean = result_mean, sd = result_sd,
index = 1:1000)
library(ggpubr)
p1 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result_2 |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
library(ggpubr)
p1 = result |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
p3 = result_2 |> ggplot(aes(x = result_mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p4 = result_2  |> ggplot(aes(x = result_sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2, p3, p4,
labels = c("Mean unbiased", "SD unbiased",
"Mean weighted", "SD weighted"),
ncol = 2, nrow = 2)
result_2
library(ggpubr)
p1 = result |> ggplot(aes(x = mean)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = mean(population$diameter)), size=2, color = "blue")
p2 = result |> ggplot(aes(x = sd)) +
geom_histogram(bins = 25) +
geom_vline(aes(xintercept = sd(population$diameter)), size=2, color = "blue")
ggarrange(p1, p2,
labels = c("Mean", "SD"),
ncol = 2, nrow = 1)
rbind(male,female)
set.seed(2023)
male = data.frame(
length = rnorm(n=2000, mean = 57.5, sd = 3),
sex = rep("Male", 2000)
)
female = data.frame(
length = rnorm(n=3000, mean = 50.5, sd = 2.8),
sex = rep("Female", 3000)
)
# because we already have the sex indicator column,
# we don't need to use bind_rows, but
population_2 = rbind(male,female)
rbind(male,female)
bind_rows(male,female)
library(ggthemes)
p <- population_2  |>
ggplot( aes(x=length, fill=sex)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
library(ggthemes)
p <- population_2  |>
ggplot( aes(x=length, fill=sex)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
library(ggthemes)
population_2  |>
ggplot( aes(x=length, fill=sex)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
library(ggthemes)
population_2  |>
ggplot( aes(x=length, fill=sex)) +
geom_histogram(bin = 25,color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
