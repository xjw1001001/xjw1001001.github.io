# Create a new data frame with mean monthly ozone concentrations
GaringerOzone.monthly.mean <- aggregate(GaringerOzone$Daily.Max.8.hour.Ozone.Concentration,
by = list(year = format(GaringerOzone$Date, "%Y"),
month = format(GaringerOzone$Date, "%m")),
FUN = mean)
GaringerOzone.monthly.mean$Date <- as.Date(paste(GaringerOzone.monthly.mean$year,
GaringerOzone.monthly.mean$month,
"01", sep = "-"))
# Create a plot with both a point and line layer
ggplot(GaringerOzone.monthly.mean, aes(x = Date, y = x)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "Mean Monthly Ozone Concentration (ppm)",
title = "Mean Monthly Ozone Concentrations at Garinger High School") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")
#13
# Create a new data frame with mean monthly ozone concentrations
GaringerOzone.monthly.mean <- aggregate(GaringerOzone$Daily.Max.8.hour.Ozone.Concentration,
by = list(year = format(GaringerOzone$Date, "%Y"),
month = format(GaringerOzone$Date, "%m")),
FUN = mean)
GaringerOzone.monthly.mean$Date <- as.Date(paste(GaringerOzone.monthly.mean$year,
GaringerOzone.monthly.mean$month,
"01", sep = "-"))
# Create a plot with both a point and line layer
ggplot(GaringerOzone.monthly.mean, aes(x = Date, y = x)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "Mean Monthly Ozone Concentration (ppm)",
title = "Mean Monthly Ozone Concentrations at Garinger High School") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#13
# Create a new data frame with mean monthly ozone concentrations
GaringerOzone.monthly.mean <- aggregate(GaringerOzone$Daily.Max.8.hour.Ozone.Concentration,
by = list(year = format(GaringerOzone$Date, "%Y"),
month = format(GaringerOzone$Date, "%m")), UN = mean)
#13
# Create a new data frame with mean monthly ozone concentrations
GaringerOzone.monthly.mean <- aggregate(GaringerOzone$Daily.Max.8.hour.Ozone.Concentration,
by = list(year = format(GaringerOzone$Date, "%Y"),
month = format(GaringerOzone$Date, "%m")), FUN = mean)
GaringerOzone.monthly.mean$Date <- as.Date(paste(GaringerOzone.monthly.mean$year,
GaringerOzone.monthly.mean$month,"01", sep = "-"))
# Create a plot with both a point and line layer
ggplot(GaringerOzone.monthly.mean, aes(x = Date, y = x)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "Mean Monthly Ozone Concentration (ppm)",
title = "Mean Monthly Ozone Concentrations at Garinger High School") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 year")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#12
# Run SMK test
wind_data_trend1 <- Kendall::SeasonalMannKendall(GaringerOzone.monthly.ts)
# Inspect results
wind_data_trend1
summary(wind_data_trend1)
??MannKendall
#15
# Subtract the seasonal component from the monthly time series
non_seasonal <- GaringerOzone.monthly.ts - decomp_monthly$seasonal
#16
mk_test_non_seasonal <- Kendall::MannKendall(non_seasonal)
mk_test_non_seasonal
#15
# Subtract the seasonal component from the monthly time series
non_seasonal <- GaringerOzone.monthly.ts - decomp_monthly$seasonal
#16
mk_test_non_seasonal <- Kendall::MannKendall(non_seasonal)
summary(mk_test_non_seasonal)
non_seasonal
decomp_monthly
decomp_monthly$seasonal
non_seasonal
GaringerOzone.monthly.ts
decomp_monthly$seasonal
GaringerOzone.monthly.ts - decomp_monthly$seasonal
#11
# Decompose the daily time series object
decomp_daily <- decompose(GaringerOzone.daily.ts, "multiplicative")
# Plot the daily decomposition
par(mfrow = c(4,1), mar = c(3, 3, 1, 1), oma = c(0, 0, 2, 0))
plot(GaringerOzone.daily.ts, main = "Daily Ozone Concentration")
plot(decomp_daily$trend, main = "Trend Component")
plot(decomp_daily$seasonal, main = "Seasonal Component")
plot(decomp_daily$random, main = "Residual Component")
# Decompose the monthly time series object
decomp_monthly <- decompose(GaringerOzone.monthly.ts, "multiplicative")
# Plot the monthly decomposition
par(mfrow = c(4,1), mar = c(3, 3, 1, 1), oma = c(0, 0, 2, 0))
plot(GaringerOzone.monthly.ts, main = "Monthly Mean Ozone Concentration")
plot(decomp_monthly$trend, main = "Trend Component")
plot(decomp_monthly$seasonal, main = "Seasonal Component")
plot(decomp_monthly$random, main = "Residual Component")
#11
# Decompose the daily time series object
decomp_daily <- decompose(GaringerOzone.daily.ts, "multiplicative")
# Plot the daily decomposition
par(mfrow = c(4,1), mar = c(3, 3, 1, 1), oma = c(0, 0, 2, 0))
plot(GaringerOzone.daily.ts, main = "Daily Ozone Concentration")
plot(decomp_daily$trend, main = "Trend Component")
plot(decomp_daily$seasonal, main = "Seasonal Component")
plot(decomp_daily$random, main = "Residual Component")
# Decompose the monthly time series object
decomp_monthly <- decompose(GaringerOzone.monthly.ts, "multiplicative")
# Plot the monthly decomposition
par(mfrow = c(4,1), mar = c(3, 3, 1, 1), oma = c(0, 0, 2, 0))
plot(GaringerOzone.monthly.ts, main = "Monthly Mean Ozone Concentration")
plot(decomp_monthly$trend, main = "Trend Component")
plot(decomp_monthly$seasonal, main = "Seasonal Component")
plot(decomp_monthly$random, main = "Residual Component")
?stl
decomp_daily <- stl(GaringerOzone.daily.ts, s.window = "periodic")
decomp_daily
plot(EnoDischarge.late_Decomposed)
# Decompose the daily time series object
decomp_daily <- stl(GaringerOzone.daily.ts, s.window = "periodic")
# Plot the daily decomposition
plot(decomp_daily)
#11
# Decompose the daily time series object
decomp_daily <- stl(GaringerOzone.daily.ts, s.window = "periodic")
# Plot the daily decomposition
plot(decomp_daily)
# Decompose the monthly time series object
decomp_monthly <- stl(GaringerOzone.monthly.ts, s.window = "periodic")
# Plot the monthly decomposition
plot(decomp_monthly)
decomp_monthly$seasonal
decomp_monthly
#15
# Subtract the seasonal component from the monthly time series
non_seasonal <- GaringerOzone.monthly.ts - decomp_monthly$seasonal
decomp_monthly$seasonal
decomp_monthly$time.series
#15
# Subtract the seasonal component from the monthly time series
non_seasonal <- GaringerOzone.monthly.ts - decomp_monthly$time.series$seasonal
decomp_monthly$time.series$seasonal
as.dataframe(decomp_monthly$time.series)$seasonal
as.data.frame(decomp_monthly$time.series)$seasonal
#15
# Subtract the seasonal component from the monthly time series
non_seasonal <- GaringerOzone.monthly.ts - as.data.frame(decomp_monthly$time.series)$seasonal
#16
mk_test_non_seasonal <- Kendall::MannKendall(non_seasonal)
summary(mk_test_non_seasonal)
install.packages('formatR')
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
library(dslabs)
head(murders)
library(dslabs)
head(murders, 3)
heights
head(heights, 3)
dim(heights)
?heights
knitr::include_graphics("img/sample-size-definition.png")
head(murders, 3)
head(mtcars)
head(heights)
dplyr::glimpse(hotels)
xaringanExtra::use_xaringan_extra(c("tile_view", "animate_css", "tachyons"))
xaringanExtra::use_panelset()
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
library(dplyr)
library(ggplot2)
library(unvotes)
#install.packages(tidyverse)
library(tidyverse)
knitr::include_graphics("img/dplyr-part-of-tidyverse.png")
hotels <- readr::read_csv("data/hotels.csv")
dplyr::glimpse(hotels)
select(hotels, lead_time)
colnames(hotels)
hotels %>%
select(hotel, lead_time) %>%
arrange(lead_time)
select(hotels, -agent)
select(hotels, hotel:arrival_date_month)
select(hotels, ends_with("type"))
{{hotels %>% }}
{{hotels %>% }}
colnames(hotels)[1:10]
hotels |> head(5)
hotels |> top_n(5, adr)
xaringanExtra::use_xaringan_extra(c("tile_view", "animate_css", "tachyons"))
xaringanExtra::use_panelset()
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
library(dplyr)
library(ggplot2)
library(unvotes)
hotels <- readr::read_csv("data/hotels.csv")
dplyr::glimpse(hotels)
hotels %>%
distinct(market_segment)
hotels %>%
distinct(market_segment) %>%
arrange(market_segment)
hotels %>%
distinct(hotel, market_segment) %>% #<<
arrange(hotel, market_segment)
hotels
colnames(hotels)
library(dslabs)
data(murders)
murders %>% mutate(rate = total/population * 100000)
murders %>% mutate(rank = rank(temperature)) %>% arrange(rank)
murders %>% mutate(rank = rank(population)) %>% arrange(rank)
?arrange
murders %>% mutate(rank = rank(population)) %>%
arrange(desc(rank)) %>$% head()
murders %>% mutate(rank = rank(population)) %>%
arrange(desc(rank)) %>% head()
# alphabetical order by default
hotels %>%
count(market_segment) #<<
# descending frequency order
hotels %>%
count(market_segment,
sort = TRUE) #<<
hotels %>%
count(hotel, market_segment)
# hotel type first
hotels %>%
count(hotel, market_segment) #<<
# market segment first
hotels %>%
count(market_segment, hotel) #<<
# mean average daily rate for all bookings
hotels %>%
summarize(mean_adr = mean(adr))
# mean average daily rate for all bookings
hotels %>%
summarize(mean_adr = mean(adr))
hotels %>%
summarize(mean_adr = mean(adr)) %>% pull()
hotels %>%
summarize(mean_adr = mean(adr)) %>% pull(mean_adr)
hotels %>%
group_by(hotel) %>%
summarize(mean_adr = mean(adr)) %>% pull()
hotels %>%
group_by(hotel) %>%
summarize(mean_adr = mean(adr)) %>% pull(mean_adr)
hotels
hotels %>% select(hotel:lead_time)
rename(hotel = hotel_name) %>% head()
hotels %>% select(hotel:lead_time)
rename(hotel_name = hotel) %>% head()
hotels
hotels %>% select(hotel:lead_time) %>%
rename(hotel_name = hotel) %>% head()
# Bring in datasets
data(band_instruments2)
head(band_instruments2)
data(band_members)
head(band_members)
# Inner join
inner_join(band_instruments2, band_members, artist = name)
band_members
band_instruments2
inner_join(band_instruments2, band_members, artist = name)
band_instruments2
?inner_join
# Bring in datasets
data(band_instruments2)
head(band_instruments2)
data(band_members)
head(band_members)
# Inner join
inner_join(band_instruments2, band_members, by = join_by(name == artist))
# Bring in datasets
data(band_instruments2)
head(band_instruments2)
data(band_members)
head(band_members)
# Inner join
band_members %>% inner_join(band_instruments2, by = join_by(name == artist))
# Left join
left_join(band_instruments2, band_members, artist = name)
install.packages("gifski")
library(dslabs)
data(murders)
head(murders)
knitr::include_graphics("img/elephant.jpg")
knitr::include_graphics("img/ggplot2-part-of-tidyverse.png")
library(renderthis)
to_pdf(from = "lecture6.Rmd",complex_slides = TRUE)
to_pdf(from = "lecture6.Rmd",complex_slides = TRUE)
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
knitr::include_graphics("img/grammar-of-graphics.png")
knitr::include_graphics("img/penguins.png")
p <-  murders |> ggplot(aes(population/10^6, total, label = abb)) +
geom_point(aes(color = region), size = 3) + #<<
geom_text(nudge_x = 0.08) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
?geom_abline
murders |> ggplot(aes(population/10^6, total, label = abb)) +
geom_point(aes(color = region), size = 3,
show.legend = FALSE) + #<<
geom_text(nudge_x = 0.08) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
geom_abline(slope = 1, intercept = log10(r))
murders |> ggplot(aes(population/10^6, total, label = abb)) +
geom_point(aes(color = region), size = 3,
show.legend = FALSE) + #<<
geom_text(nudge_x = 0.08) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
geom_abline(slope = 1, intercept = log10(r))
r <- murders |>
summarize(rate = sum(total) /  sum(population) * 10^6) |>
pull(rate)
murders |> ggplot(aes(population/10^6, total, label = abb)) +
geom_point(aes(color = region), size = 3,
show.legend = FALSE) + #<<
geom_text(nudge_x = 0.08) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
geom_abline(slope = 1, intercept = log10(r))
p <-  murders |> ggplot(aes(population/10^6, total, label = abb)) +
geom_point(aes(color = region), size = 3) +
geom_text(nudge_x = 0.08) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
scale_color_discrete(name = "Region") #<<
p
library(ggrepel)
install.packages("emo")
devtools::install_github("hadley/emo")
install.packages("devtools")
devtools::install_github("hadley/emo")
emo::ji("x")
dataframe3 <- data.frame(z1 = "5", z2 = 7, z3 = 12)
dataframe3[1, 2] + dataframe3[1, 3]
# Don't change anything here
knitr::opts_chunk$set(
comment = "", prompt = F, message=F, warning = F
)
filter(murders, state == "New York");
filter(murders, state == "New York")
no_florida <- filter(murders, state != "Florida")
filter(murders, state %in% c("New York", "Texas"))
filter(murders, population < 5000000 & region == "Northeast")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
flights
library(nycflights13)
library(tidyverse)
head(flights)
library(NHANES)
library(NHANES)
data(NHANES)
myfile <- "https://https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile)
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile)
data
?read.csv
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile, skip = 1)
data
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile)
head(data)
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile) %>% select(-X)
head(data)
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile) %>% select(-X)
head(data)
?geom_point
colnames(data)
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy))
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy)) +
geom_point()
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
alpha = year)) +
geom_point()
data$Year
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
alpha = Year)) +
geom_point()
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year)) +
geom_point()
myfile <- "https://raw.githubusercontent.com/xjw1001001/xjw1001001.github.io/main/data/homework%20data/HW2data.csv"
data = read.csv(myfile) %>%
select(-X) %>%
mutate(Year = as.factor(Year))
head(data)
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year)) +
geom_point()
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year)) +
geom_point() +
scale_x_continuous(trans='log2')
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year, size = Population)) +
geom_point() +
scale_x_continuous(trans='log2')
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year, size = Population)) +
geom_point() +
scale_x_continuous(trans='log2')
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2')
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(Year)
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = Year, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year)
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = region, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year)
?ggthemes
library(ggthemes)
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = region, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year) +
theme_solarized()
data$Country.Name
library(ggrepel)
country_list = c("Afghanistan","Belgium","Canada","Djibouti","France","Indonesia","Mexico","Sudan")
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy,
color = region, size = Population)) +
geom_point(alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year) +
theme_solarized() +
geom_text_repel(data =
subset(data, Country.Name %in% country_list),
aes(label = Country.Name))
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy)) +
geom_point(aes(color = region, size = Population),
alpha = 0.5) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year) +
theme_solarized() +
geom_text_repel(data =
subset(data, Country.Name %in% country_list),
aes(label = Country.Name))
?ggrepel
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy)) +
geom_point(aes(color = region, size = Population),
alpha = 0.8) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year) +
theme_solarized() +
geom_label_repel(data =
subset(data, Country.Name %in% country_list),
aes(label = Country.Name))
data %>% ggplot(aes(GDP.per.capita, Life.Expectancy)) +
geom_point(aes(color = region, size = Population),
alpha = 0.8) +
scale_x_continuous(trans='log2') +
facet_wrap(~Year) +
theme_solarized() +
geom_text_repel(data =
subset(data, Country.Name %in% country_list),
aes(label = Country.Name),
box.padding = 0.5, max.overlaps = Inf)
library(renderthis)
to_pdf(from = "lecture4.Rmd",complex_slides = TRUE)
knitr::opts_chunk$set(
comment = "",eval = TRUE,fig.retina = 2, message=F, warning = F
)
library(renderthis)
to_pdf(from = "lecture4.Rmd",complex_slides = TRUE)
setwd("~/GitHub/xjw1001001.github.io/lecture/Lecture 4")
to_pdf(from = "lecture4.Rmd",complex_slides = TRUE)
